Here’s a **ready-to-push MERN stack project structure** with all files, Dockerfiles, and `docker-compose.yml`. You can copy this whole thing into your repo.

---

# 📂 Project Structure

```
mern-docker/
│── docker-compose.yml
│── README.md
│
├── backend/
│   ├── Dockerfile
│   ├── package.json
│   ├── server.js
│
├── frontend/
│   ├── Dockerfile
│   ├── package.json
│   ├── public/
│   │   └── index.html
│   └── src/
│       ├── index.js
│       └── App.js
```

---

# 📜 Files

### `docker-compose.yml`

```yaml
version: "3"
services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    depends_on:
      - mongo

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

---

## 🖥️ Backend (`backend/`)

### `backend/Dockerfile`

```dockerfile
FROM node:18

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 5000
CMD ["node", "server.js"]
```

### `backend/package.json`

```json
{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.3.0",
    "cors": "^2.8.5",
    "body-parser": "^1.20.2"
  }
}
```

### `backend/server.js`

```js
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bodyParser = require("body-parser");

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect("mongodb://mongo:27017/mern-db", {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log("✅ Connected to MongoDB"))
  .catch(err => console.error("❌ MongoDB connection error:", err));

// Schema + Model
const UserSchema = new mongoose.Schema({ name: String });
const User = mongoose.model("User", UserSchema);

// Routes
app.get("/", (req, res) => res.send("Hello from Express Backend!"));

app.get("/users", async (req, res) => {
  const users = await User.find();
  res.json(users);
});

app.post("/users", async (req, res) => {
  const user = new User({ name: req.body.name });
  await user.save();
  res.json(user);
});

// Start server
app.listen(5000, () => console.log("🚀 Backend running on port 5000"));
```

---

## 🌐 Frontend (`frontend/`)

### `frontend/Dockerfile`

```dockerfile
FROM node:18

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3000
CMD ["npm", "start"]
```

### `frontend/package.json`

```json
{
  "name": "frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}
```

### `frontend/public/index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MERN Docker App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
```

### `frontend/src/index.js`

```js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
```

### `frontend/src/App.js`

```js
import React, { useEffect, useState } from "react";

function App() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("http://localhost:5000/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  return (
    <div>
      <h1>🚀 MERN + Docker</h1>
      <p>Users from Backend + MongoDB:</p>
      <ul>
        {users.map((u, i) => <li key={i}>{u.name}</li>)}
      </ul>
    </div>
  );
}

export default App;
```

---

## 🏃 Run the App

```bash
# Start containers
docker-compose up --build -d

# Check running containers
docker ps

# View logs (example for backend)
docker-compose logs -f backend
```

---

## 🌍 Access

* Frontend → [http://localhost:3000](http://localhost:3000)
* Backend → [http://localhost:5000](http://localhost:5000)
* MongoDB → `mongodb://mongo:27017/mern-db` (inside containers)

---

This is a **working full-stack MERN app with Docker**.
👉 You can just copy this structure, push it to GitHub, and run with `docker-compose up --build -d`.


